#
# Copyright (C) 2017 Fredrik Öhrström
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

# Expecting a spec.gmk to be included already!

# To build with a lot of build output, type:
# make VERBOSE=

# Expect release or debug as a target

ifeq (release,$(findstring release,$(MAKECMDGOALS)))
TYPE:=release
STRIP_COMMAND:=strip
endif

ifeq (debug,$(findstring debug,$(MAKECMDGOALS)))
TYPE:=debug
STRIP_COMMAND:=true
endif

ifeq ($(TYPE),)
    $(error You must specify "make release" or "make debug")
endif

$(shell mkdir -p $(OUTPUT_ROOT)/$(TYPE))

VERBOSE?=@
HEADERS:=$(wildcard $(SRC_ROOT)/src/*.h) 

WINAPI_SOURCES:=$(filter-out %posix.cc, $(wildcard $(SRC_ROOT)/src/*.cc))

WINAPI_BEAK_OBJS := \
$(OUTPUT_ROOT)/$(TYPE)/diff.o \
$(OUTPUT_ROOT)/$(TYPE)/tarentry.o \
$(OUTPUT_ROOT)/$(TYPE)/match.o \
$(OUTPUT_ROOT)/$(TYPE)/log.o \
$(OUTPUT_ROOT)/$(TYPE)/nofuse.o \
$(OUTPUT_ROOT)/$(TYPE)/tar.o \
$(OUTPUT_ROOT)/$(TYPE)/util.o \
$(OUTPUT_ROOT)/$(TYPE)/util_winapi.o \
$(NOFUSE_OBJS)

POSIX_SOURCES:=$(filter-out %winapi.cc,$(wildcard $(SRC_ROOT)/src/*.cc))
ifeq ($(ENABLE_FUSE),yes)
POSIX_SOURCES:=$(filter-out %nofuse.cc,$(POSIX_SOURCES))
endif

POSIX_OBJS:=\
    $(patsubst %.cc,%.o,$(subst $(SRC_ROOT)/src,$(OUTPUT_ROOT)/$(TYPE),$(POSIX_SOURCES)))

POSIX_BEAK_OBJS:=\
    $(filter-out %testinternals.o,$(POSIX_OBJS))

POSIX_TESTINTERNALS_OBJS:=\
    $(filter-out %main.o,$(POSIX_OBJS))

$(OUTPUT_ROOT)/generated_autocomplete.h: $(SRC_ROOT)/scripts/autocompletion_for_beak.sh
	echo Generating autocomplete include.
	cat $< | sed 's/\\/\\\\/g' | sed 's/\"/\\\"/g' | sed 's/^\(.*\)$$/"\1\\n"/g'> $@

BEAK_OBJS:=$($(PLATFORM)_BEAK_OBJS)
TESTINTERNALS_OBJS:=$($(PLATFORM)_TESTINTERNALS_OBJS)

$(OUTPUT_ROOT)/$(TYPE)/beak.o: $(OUTPUT_ROOT)/generated_autocomplete.h

$(OUTPUT_ROOT)/$(TYPE)/%.o: $(SRC_ROOT)/src/%.cc $(HEADERS)
	@echo Compiling $$(basename $<)
	$(VERBOSE)$(CXX) $(CXXFLAGS_$(TYPE)) $(CXXFLAGS) -I$(OUTPUT_ROOT) $< -c -o $@


$(OUTPUT_ROOT)/$(TYPE)/beak: $(BEAK_OBJS)
	@echo Linking $@
	$(VERBOSE)@$(CXX) -o $@ $(LDFLAGS_$(TYPE)) $(LDFLAGS) $(BEAK_OBJS) \
                      $(FUSE_LIBS) $(OPENSSL_LIBS) $(ZLIB_LIBS)
	$(VERBOSE)@$(STRIP_COMMAND) $@

$(OUTPUT_ROOT)/$(TYPE)/testinternals: $(TESTINTERNALS_OBJS)
	@echo Linking $@
	$(VERBOSE)@$(CXX) -o $@ $(LDFLAGS_$(TYPE)) $(LDFLAGS) $(BEAK_OBJS) \
                      $(FUSE_LIBS) $(OPENSSL_LIBS) $(ZLIB_LIBS)
	$(VERBOSE)@$(STRIP_COMMAND) $@

ifeq ($(CLEAN),clean)
# Clean!
release debug:
	rm -f $(OUTPUT_ROOT)/$(TYPE)/*
	rm -f $(OUTPUT_ROOT)/$(TYPE)/generated_autocomplete.h
else
# Build!
release debug:$(OUTPUT_ROOT)/$(TYPE)/beak $(OUTPUT_ROOT)/$(TYPE)/testinternals
endif

install:
	echo Installing into /usr/local/bin
	cp $(OUTPUT_ROOT)/$(TYPE)/beak /usr/local/bin
	mkdir -p /usr/local/lib/tarredfs
	cp tarredfs.1 /usr/local/share/man/man1

.PHONY: release debug

