
# Expecting a spec.gmk to be included!

# To build with a lot of build output, type:
# make VERBOSE=

# Expect release or debug as a target

ifeq ($(MAKECMDGOALS),release)
TYPE=RELEASE
STRIP_COMMAND=strip
endif

ifeq ($(MAKECMDGOALS),debug)
TYPE=DEBUG
STRIP_COMMAND=touch
endif

ifeq ($(TYPE),)
    $(error You must specify "make release" or "make debug")
endif

$(shell mkdir -p $(OUTPUT_ROOT)/$(TYPE))

$(info Building $(TYPE))

VERBOSE?=@
HEADERS:=$(wildcard $(SRC_ROOT)/src/*.h) 

$(OUTPUT_ROOT)/$(TYPE)/%.o: $(SRC_ROOT)/src/%.cc $(HEADERS)
	@echo Compiling $$(basename $<)
	$(VERBOSE)$(CXX) $(CXXFLAGS_$(TYPE)) $(CXXFLAGS) -I$(OUTPUT_ROOT) $< -c -o $@

WINAPI_SOURCES:=$(filter-out %posix.cc, $(wildcard $(SRC_ROOT)/src/*.cc))

WINAPI_BEAK_OBJS := \
$(OUTPUT_ROOT)/$(TYPE)/diff.o \
$(OUTPUT_ROOT)/$(TYPE)/tarentry.o \
$(OUTPUT_ROOT)/$(TYPE)/match.o \
$(OUTPUT_ROOT)/$(TYPE)/log.o \
$(OUTPUT_ROOT)/$(TYPE)/nofuse.o \
$(OUTPUT_ROOT)/$(TYPE)/tar.o \
$(OUTPUT_ROOT)/$(TYPE)/util.o \
$(OUTPUT_ROOT)/$(TYPE)/util_winapi.o \
$(NOFUSE_OBJS)

POSIX_SOURCES:=$(filter-out %winapi.cc,$(wildcard $(SRC_ROOT)/src/*.cc))
ifeq ($(ENABLE_FUSE),yes)
POSIX_SOURCES:=$(filter-out %nofuse.cc,$(POSIX_SOURCES))
endif

POSIX_OBJS:=\
    $(patsubst %.cc,%.o,$(subst $(SRC_ROOT)/src,$(OUTPUT_ROOT)/$(TYPE),$(POSIX_SOURCES)))

POSIX_BEAK_OBJS:=\
    $(filter-out %testinternals.o,$(POSIX_OBJS))

POSIX_TESTINTERNALS_OBJS:=\
    $(filter-out %main.o,$(POSIX_OBJS))

BEAK_OBJS:=$($(PLATFORM)_BEAK_OBJS)
TESTINTERNALS_OBJS:=$($(PLATFORM)_TESTINTERNALS_OBJS)

release debug: $(OUTPUT_ROOT)/$(TYPE)/beak $(OUTPUT_ROOT)/$(TYPE)/testinternals

$(OUTPUT_ROOT)/$(TYPE)/beak: $(BEAK_OBJS)
	@echo Linking $@
	$(VERBOSE)@$(CXX) -o $(OUTPUT_ROOT)/$(TYPE)/beak $(LDFLAGS_$(TYPE)) $(LDFLAGS) $(BEAK_OBJS) \
                      $(FUSE_LIBS) $(OPENSSL_LIBS) $(ZLIB_LIBS)
	$(VERBOSE)@$(STRIP_COMMAND) $(OUTPUT_ROOT)/$(TYPE)/beak
        
$(OUTPUT_ROOT)/$(TYPE)/testinternals: $(TESTINTERNALS_OBJS)
	@echo Linking $@
	$(VERBOSE)@$(CXX) -o $(OUTPUT_ROOT)/$(TYPE)/testinternals $(LDFLAGS_$(TYPE)) $(LDFLAGS) \
                          $(TESTINTERNALS_OBJS) \
                      $(FUSE_LIBS) $(OPENSSL_LIBS) $(ZLIB_LIBS)

install:
	echo Installing into /usr/local/bin
	cp $(OUTPUT_ROOT)/$(TYPE)/beak /usr/local/bin
	mkdir -p /usr/local/lib/tarredfs
	cp tarredfs.1 /usr/local/share/man/man1

# Clean all, then you have to re-configure.
clean-all:
	rm -rf $(OUTPUT_ROOT)

# Clean remove build artifacts, but keep configuration.
clean:
	rm -f $(OUTPUT_ROOT)/$(TYPE)/*

.PHONY: clean clean-all
