
# Expecting a spec.gmk to be included!

# To build with a lot of build output, type:
# make VERBOSE=

VERBOSE?=@
HEADERS:=$(wildcard $(SRC_ROOT)/*.h) 

$(OUTPUT_ROOT)/%.o: $(SRC_ROOT)/%.cc $(HEADERS)
	@echo Compiling $$(basename $<)
	$(VERBOSE)$(CXX) $(CXXFLAGS) -I$(OUTPUT_ROOT) $< -c -o $@

WINAPI_SOURCES:=$(filter-out %posix.cc, $(wildcard $(SRC_ROOT)/*.cc))

WINAPI_BEAK_OBJS := \
$(OUTPUT_ROOT)/diff.o \
$(OUTPUT_ROOT)/tarentry.o \
$(OUTPUT_ROOT)/match.o \
$(OUTPUT_ROOT)/log.o \
$(OUTPUT_ROOT)/nofuse.o \
$(OUTPUT_ROOT)/tar.o \
$(OUTPUT_ROOT)/util.o \
$(OUTPUT_ROOT)/util_winapi.o \
$(NOFUSE_OBJS)

POSIX_SOURCES:=$(filter-out %winapi.cc,$(wildcard $(SRC_ROOT)/*.cc))
ifeq ($(ENABLE_FUSE),yes)
POSIX_SOURCES:=$(filter-out %nofuse.cc,$(POSIX_SOURCES))
endif

POSIX_OBJS:=\
    $(patsubst %.cc,%.o,$(subst $(SRC_ROOT),$(OUTPUT_ROOT),$(POSIX_SOURCES)))

POSIX_BEAK_OBJS:=\
    $(filter-out %testinternals.o,$(POSIX_OBJS))

POSIX_TESTINTERNALS_OBJS:=\
    $(filter-out %main.o,$(POSIX_OBJS))

BEAK_OBJS:=$($(PLATFORM)_BEAK_OBJS)
TESTINTERNALS_OBJS:=$($(PLATFORM)_TESTINTERNALS_OBJS)

all: $(OUTPUT_ROOT)/beak $(OUTPUT_ROOT)/testinternals

$(OUTPUT_ROOT)/beak: $(BEAK_OBJS)
	@echo Linking $@
	$(VERBOSE)@$(CXX) -o $(OUTPUT_ROOT)/beak $(LDFLAGS) $(BEAK_OBJS) \
                      $(FUSE_LIBS) $(OPENSSL_LIBS) $(ZLIB_LIBS)

$(OUTPUT_ROOT)/testinternals: $(TESTINTERNALS_OBJS)
	@echo Linking $@
	$(VERBOSE)@$(CXX) -o $(OUTPUT_ROOT)/testinternals $(LDFLAGS) \
                          $(TESTINTERNALS_OBJS) \
                      $(FUSE_LIBS) $(OPENSSL_LIBS) $(ZLIB_LIBS)

$(OUTPUT_ROOT)/tarredfs-untar: untar.sh
	cp untar.sh $(OUTPUT_ROOT)/tarredfs-untar
	chmod a+x $(OUTPUT_ROOT)/tarredfs-untar

$(OUTPUT_ROOT)/tarredfs-pack: pack.sh
	cp pack.sh $(OUTPUT_ROOT)/tarredfs-pack
	chmod a+x $(OUTPUT_ROOT)/tarredfs-pack

$(OUTPUT_ROOT)/tarredfs-compare: compare.sh
	cp compare.sh $(OUTPUT_ROOT)/tarredfs-compare
	chmod a+x $(OUTPUT_ROOT)/tarredfs-compare

$(OUTPUT_ROOT)/tarredfs-integrity-test: integrity-test.sh
	cp integrity-test.sh $(OUTPUT_ROOT)/tarredfs-integrity-test
	chmod a+x $(OUTPUT_ROOT)/tarredfs-integrity-test

install:
	echo Installing into /usr/local/bin
	cp $(OUTPUT_ROOT)/beak /usr/local/bin
	cp $(OUTPUT_ROOT)/tarredfs-* /usr/local/bin
	mkdir -p /usr/local/lib/tarredfs
	cp format_find.pl /usr/local/lib/tarredfs/format_find.pl
	cp format_tar.pl /usr/local/lib/tarredfs/format_tar.pl
	cp tarredfs.1 /usr/local/share/man/man1

# Clean all, then you have to re-configure.
clean-all:
	rm -rf $(OUTPUT_ROOT)

# Clean remove build artifacts, but keep configuration.
clean:
	rm -f $(BEAK_OBJS) $(TESTINTERNALS_OBJS) \
        $(OUTPUT_ROOT)/beak \
        $(OUTPUT_ROOT)/testinternals \
	$(OUTPUT_ROOT)/tarredfs-untar $(OUTPUT_ROOT)/tarredfs-pack \
	$(OUTPUT_ROOT)/tarredfs-compare $(OUTPUT_ROOT)/tarredfs-integrity-test *~

.PHONY: clean clean-all
